# subtract post-pre relative abundance
mutate(delta_abund = postg_rel_abund - preg_rel_abund) %>%
# create a column for binning
mutate(sorption_frac = cut(delta_abund,
breaks = c(-Inf,-0.00015, -0.00010, -0.00005, 0.00005,0.00010,0.00015,Inf),
labels = c("most sorbed", "more sorbed", "sorbed", "minimal change","unbound","more unbound","most unbound"))) ->
# cleaning up: remove unnecessary columnns
#  select(-(preg_total:delta_abund))->
data_goethite_relabund
data_goethite_relabund = merge(data_goethite_relabund,hcoc, by = "Mass", all.x = T)
ggplot(data_goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.5)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
ggplot(data_goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
ggplot(data_goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
View(data_goethite_relabund)
View(data_processed_long)
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) %>% # calculate avg. intensity
ungroup %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # then spread to create multiple columns
data_processed
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) %>% # calculate avg. intensity
ungroup %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
# create a longform version
data_processed %>%
gather(treatment, intensity,3:6)->
data_processed_long
View(data_processed_long)
data_processed_long %>%
group_by(Forest, treatment) %>%
dplyr::summarise(mean = mean(intensity))
data_processed_long %>%
group_by(Forest, treatment) %>%
dplyr::summarise(m = mean(intensity))
data_processed_long %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::summarise(m = mean(intensity))
data_processed_long %>%
dplyr::group_by(Forest) %>%
dplyr::summarise(m = mean(intensity))
dplyr::summarise(m = mean(as.numeric(intensity))
data_processed_long %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::summarise(m = mean(as.numeric(intensity)))
data_processed_long %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::summarise(m = mean(as.numeric(intensity, na.rm = TRUE)))
data_processed_long %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::summarise(m = mean(intensity, na.rm = TRUE))
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) %>% # calculate avg. intensity
ungroup -> # then spread to create multiple columns
data_processed
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # calculate avg. intensity
data_processed_long
data_processed_long %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
### OUTPUT
write.csv(data_processed_long, FTICR_MASTER_LONG)
data_processed_long %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::summarise(m = mean(intensity, na.rm = TRUE))
data_processed_long %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::summarise(m = mean(intensity, na.rm = TRUE))
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # calculate avg. intensity
data_processed_long
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment,Fenton,Goethite, Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # calculate avg. intensity
data_processed_long
data_processed_long %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment,Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # calculate avg. intensity
data_processed_long
data_processed_long %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
### OUTPUT
write.csv(data_processed_long, FTICR_MASTER_LONG)
data_processed_long %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::summarise(m = mean(intensity, na.rm = TRUE))
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((treatment=="PreFentonGoethite"|treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((treatment=="PreFenton"|treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
#  select(-treatment) %>%
spread(goethite, intensity)->
data_goethite
View(data_goethite)
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment,Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # calculate avg. intensity
data_processed_long
data_processed_long %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
#  select(-treatment) %>%
spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup ->
#  select(-treatment) %>%
#  spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup ->
select(-treatment) %>%
#  spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup ->
select(-Treatment) %>%
#  spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) %>%
#  spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) ->
#  spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) ->
spread(goethite, intensity)->
data_goethite
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) %>%
spread(goethite, intensity)->
data_goethite
data_goethite %>%
dplyr::group_by(Forest, fenton) %>%
dplyr::summarise(m = mean(intensity, na.rm = TRUE))
data_goethite %>%
dplyr::group_by(Forest, fenton) %>%
dplyr::summarise(preg = mean(PreGoethite, na.rm = TRUE),
postg = mean(PostGoethite, na.rm = TRUE))
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) %>%
spread(goethite, intensity)->
data_goethite
data_goethite %>%
mutate(fenton = factor(fenton, levels = c("PreFenton","PostFenton"))) %>% # order the levels
dplyr::group_by(Forest,fenton) %>%
# replace all NA with 0
replace(., is.na(.),0) %>%
# new columns for pre-goethite and post-goethite total intensities
dplyr::mutate(preg_total = sum(PreGoethite, na.rm = TRUE),
postg_total = sum(PostGoethite, na.rm = TRUE)) %>%
# new columns for relative abundance as fraction
mutate(preg_rel_abund = PreGoethite/preg_total) %>%
mutate(postg_rel_abund = PostGoethite/postg_total) %>%
# subtract post-pre relative abundance
mutate(delta_abund = postg_rel_abund - preg_rel_abund) %>%
# create a column for binning
mutate(sorption_frac = cut(delta_abund,
breaks = c(-Inf,-0.00015, -0.00010, -0.00005, 0.00005,0.00010,0.00015,Inf),
labels = c("most sorbed", "more sorbed", "sorbed", "minimal change","unbound","more unbound","most unbound"))) ->
# cleaning up: remove unnecessary columnns
#  select(-(preg_total:delta_abund))->
data_goethite_relabund
ggplot(data_goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
data_goethite_relabund = merge(data_goethite_relabund,hcoc, by = "Mass", all.x = T)
ggplot(data_goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
# select only the relevant columns. don't include the Goethite columns
data_processed %>%
select(Mass,Forest, PreFenton, PostFenton) ->
data_fenton
data_fenton %>%
# create a conditional column for molecules that were lost, gained, or conserved
mutate(loss = case_when(!is.na(PreFenton) & is.na(PostFenton) ~ "lost",
is.na(PreFenton) & !is.na(PostFenton) ~ "gained",
!is.na(PreFenton) & !is.na(PostFenton) ~ "conserved"),
loss = factor(loss, levels = c("lost","gained","conserved"))) -> # order these levels
data_fenton
# INPUT FILES
# use this file for meta for now. this may move to a different folder/name later
meta = read.csv("stomfiles/meta_RAW.csv")
hcoc = meta %>% select(Mass,HC,OC)
#meta = read.csv(FTICR_META)# <- "fticr/fticr_meta.csv" # all metadata about formula, etc. assignment for each m/z value
#hcoc = read.csv(HCOC)
master = read.csv(FTICR_MASTER_LONG)# <- "fticr/fticr_master_long.csv" #
rawmaster = read.csv(FTICR_RAWMASTER_LONG)# <- "fticr/fticr_rawmaster_long.csv"
fenton = read.csv(FTICR_FENTON)# <- "fticr/fticr_fenton.csv" # pre- and post-Fenton data, intensities only
goethite = read.csv(FTICR_GOETHITE)# <- "fticr/fticr_goethite.csv" # pre- and post-Goethite data, intensities only
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
# then create a column for quartiles
relative_intensity %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::mutate(percentile = ntile(rel_abund, 100)) %>%
mutate(perc = cut(percentile,
breaks = c(-Inf,25, 50, 75, Inf),
labels = c("lowest 25%", "third 25 %", "second 25 %", "top 25 %")))->
relative_intensity_percentile
# remove unnecessary columns
relative_intensity_percentile %>%
select(-intensity, -total, -percentile)->
relative_intensity_percentile
# merge with the hcoc file
relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x=T)
# relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x = T)
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
View(master)
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() -> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
#na.omit() %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == c("PreFenton","PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() %>% # remove all NA, or it won't calculate
group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == "PreFenton"| Treatment=="PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit() %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == "PreFenton"| Treatment=="PostFenton")) %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == "PreFenton"| Treatment=="PostFenton") %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
View(relative_intensity)
# then create a column for quartiles
relative_intensity %>%
dplyr::group_by(Forest, treatment) %>%
dplyr::mutate(percentile = ntile(rel_abund, 100)) %>%
mutate(perc = cut(percentile,
breaks = c(-Inf,25, 50, 75, Inf),
labels = c("lowest 25%", "third 25 %", "second 25 %", "top 25 %")))->
relative_intensity_percentile
# then create a column for quartiles
relative_intensity %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(percentile = ntile(rel_abund, 100)) %>%
mutate(perc = cut(percentile,
breaks = c(-Inf,25, 50, 75, Inf),
labels = c("lowest 25%", "third 25 %", "second 25 %", "top 25 %")))->
relative_intensity_percentile
# remove unnecessary columns
relative_intensity_percentile %>%
select(-intensity, -total, -percentile)->
relative_intensity_percentile
# merge with the hcoc file
relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x=T)
ggplot(relative_intensity_percentile, aes(x = OC,y = HC, color = perc))+
geom_point(alpha = 0.5)+
scale_color_brewer(palette = "Reds")+
facet_grid(Forest~Treatment)
ggplot(relative_intensity_percentile, aes(x = OC,y = HC, color = perc))+
geom_point(alpha = 1)+
scale_color_brewer(palette = "Reds")+
facet_grid(Forest~Treatment)
ggplot(relative_intensity_percentile, aes(x = OC,y = HC, color = perc))+
geom_point(alpha = 0.5)+
scale_color_brewer(palette = "Reds")+
facet_grid(Forest~Treatment)
### OUTPUT
write_csv(relative_intensity_percentile, PERCENTILE)
data_goethite %>%
mutate(fenton = factor(fenton, levels = c("PreFenton","PostFenton"))) %>% # order the levels
dplyr::group_by(Forest,fenton) %>%
# replace all NA with 0
replace(., is.na(.),0) %>%
# new columns for pre-goethite and post-goethite total intensities
dplyr::mutate(preg_total = sum(PreGoethite, na.rm = TRUE),
postg_total = sum(PostGoethite, na.rm = TRUE)) %>%
# new columns for relative abundance as fraction
mutate(preg_rel_abund = PreGoethite/preg_total) %>%
mutate(postg_rel_abund = PostGoethite/postg_total) %>%
# subtract post-pre relative abundance
mutate(delta_abund = postg_rel_abund - preg_rel_abund) %>%
# create a column for binning
mutate(sorption_frac = cut(delta_abund,
breaks = c(-Inf,-0.00015, -0.00010, -0.00005, 0.00005,0.00010,0.00015,Inf),
labels = c("most sorbed", "more sorbed", "sorbed", "minimal change","unbound","more unbound","most unbound"))) ->
# cleaning up: remove unnecessary columnns
#  select(-(preg_total:delta_abund))->
data_goethite_relabund
data_goethite_relabund = merge(data_goethite_relabund,hcoc, by = "Mass", all.x = T)
ggplot(data_goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
### OUTPUT
write_csv(data_goethite_relabund, GOETHITE_ADSORPTION)
data_goethite_relabund %>%
select(Mass, Forest, fenton, PreGoethite, sorption_frac)->
data_goethite_adsorbed
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
data_goethite_adsorbed %>%
filter(sorption_frac==c("most sorbed","most unbound"))->
data_goethite_adsorbed
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
data_goethite_adsorbed %>%
filter(sorption_frac %>% in %>% c("most sorbed","most unbound"))->
data_goethite_adsorbed
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
data_goethite_adsorbed %>%
filter(sorption_frac %>% in %>% c("most sorbed","most unbound"))->
data_goethite_adsorbed
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
data_goethite_adsorbed %>%
filter(sorption_frac=="most sorbed"| sorption_frac=="most unbound")->
data_goethite_adsorbed
View(data_goethite_adsorbed)
# merge with the class meta file
data_goethite_adsorbed = merge(data_goethite_adsorbed, fticr_meta_class, by = "Mass", all.x = T)
# merge with the class meta file
data_goethite_adsorbed = merge(data_goethite_adsorbed, meta_RAW, by = "Mass", all.x = T)
View(meta_RAW)
View(meta)
# merge with the class meta file
data_goethite_adsorbed = merge(data_goethite_adsorbed, meta, by = "Mass", all.x = T)
# remove the "Other" class
data_goethite_adsorbed %>%
filter(!Class=="Other")->
data_goethite_adsorbed
meta_RAW_distinct %>%
select(Mass,Class)->
meta_CLASS
data_goethite_relabund %>%
select(Mass, Forest, fenton, PreGoethite, sorption_frac)->
data_goethite_adsorbed
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
data_goethite_adsorbed %>%
filter(sorption_frac=="most sorbed"| sorption_frac=="most unbound")->
data_goethite_adsorbed
# merge with the class meta file
data_goethite_adsorbed = merge(data_goethite_adsorbed, meta_CLASS, by = "Mass", all.x = T)
data_goethite_adsorbed %>%
group_by(Forest,fenton,sorption_frac,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(PreGoethite), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(Forest, fenton, sorption_frac) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
data_goethite_adsorbed_relabund
View(data_goethite_adsorbed_relabund)
ggplot(data_goethite_adsorbed_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "identity")
ggplot(data_goethite_adsorbed_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "identity", position = position_dodge())
ggplot(data_goethite_adsorbed_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "identity", position = position_dodge())+
facet_grid(Forest~fenton)
ggplot(data_goethite_adsorbed_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "identity", position = position_dodge())+
facet_grid(fenton~Forest)
