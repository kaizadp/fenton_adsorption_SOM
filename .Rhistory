## INPUT FILES ----
HW_PREFENTONGOETHITE = read.csv("stomfiles/PreFentonHWAdsorp-Master.csv")
HW_POSTFENTONGOETHITE = read.csv("stomfiles/PostFenHWAdsorp-Master.csv") #needs cleaning
SW_PREFENTONGOETHITE = read.csv("stomfiles/PreFentonSWAdsorp.csv") #ok
SW_POSTFENTONGOETHITE = read.csv("stomfiles/PostFentonSWAdsorp.csv")
SOIL_KEY = read.csv("data/soil_key.csv")
## INPUT -- META ----
# because different files have potentially different sets of peaks, we want to import all four files, get the relevant columns, combine, and then remove duplicates.
# this will ensure we have captured all the necessary peaks for the meta-data file
# tiring, yes
# remove the sample data columns. these are coded as xxx.csv
HW_PREFENTONGOETHITE %>%
dplyr::select(-ends_with(".csv")) ->
meta_HW_PREFENTONGOETHITE
HW_POSTFENTONGOETHITE %>%
select(-ends_with(".csv"))->
meta_HW_POSTFENTONGOETHITE
SW_PREFENTONGOETHITE %>%
select(-ends_with(".csv"))->
meta_SW_PREFENTONGOETHITE
SW_POSTFENTONGOETHITE %>%
select(-ends_with(".csv")) ->
meta_SW_POSTFENTONGOETHITE
# set all column names to be consistent across all
# manually checked before doing so -- the relevant columns have the same names and are in the same positions.
# only the irrelevant columns (AvgInitial vs. InitialAvg) are mislabelled, so it is ok
names(meta_HW_POSTFENTONGOETHITE) = names(meta_HW_PREFENTONGOETHITE)
names(meta_SW_POSTFENTONGOETHITE) = names(meta_HW_PREFENTONGOETHITE)
names(meta_SW_PREFENTONGOETHITE) = names(meta_HW_PREFENTONGOETHITE)
# confirm that the column names are identical across all sheets
identical(names(meta_HW_PREFENTONGOETHITE),names(meta_HW_POSTFENTONGOETHITE))
identical(names(meta_HW_POSTFENTONGOETHITE),names(meta_SW_PREFENTONGOETHITE))
identical(names(meta_SW_PREFENTONGOETHITE),names(meta_SW_POSTFENTONGOETHITE))
# combine all four files using rbind, which stacks the sheets one below the other
# we need to ensure all sheets have the same column names, hence the exercise above
meta_RAW = rbind(meta_HW_PREFENTONGOETHITE,meta_HW_POSTFENTONGOETHITE, meta_SW_PREFENTONGOETHITE,meta_SW_POSTFENTONGOETHITE)
# this is f-ed up
# there isn't a single column with Class groupings, but one column for each grouping
# NA is coded as ---- here,
# so we need to code it back to NA and then create a single column that has all the Class assignments
# there are six Class assignments
# 1. CondAr
# 2. Aromatic
# 3. HighUnsatLignin
# 4. Aliph_noN
# 5. SatFACarb
# 6. Aliph_N
meta_RAW %>%
na_if(.,"----") %>%
mutate(Class = case_when(!is.na(PolyCyArom)&is.na(Aromatic)&is.na(HighUnsatLign)&is.na(UnsatAliph.N)&is.na(SatFatAcCarb)~"Condensed Ar",
is.na(PolyCyArom)&(Aromatic=="Aromatic")&is.na(HighUnsatLign)&is.na(UnsatAliph.N)&is.na(SatFatAcCarb)~"Aromatic",
is.na(PolyCyArom)&is.na(Aromatic)&(HighUnsatLign=="HUnSatLig")&is.na(UnsatAliph.N)&is.na(SatFatAcCarb)~"Lignin-like",
is.na(PolyCyArom)&is.na(Aromatic)&is.na(HighUnsatLign)&(UnsatAliph.N=="AlipatNoN")&is.na(SatFatAcCarb)~"Aliphatic-noN",
is.na(PolyCyArom)&is.na(Aromatic)&is.na(HighUnsatLign)&is.na(UnsatAliph.N)&(SatFatAcCarb=="SatFACarb")~"Carbohydrate-like",
is.na(PolyCyArom)&is.na(Aromatic)&is.na(HighUnsatLign)&is.na(UnsatAliph.N)&is.na(SatFatAcCarb)&(UnSatAlip.N=="Alipat+N")~"Aliphatic+N"))->
meta_RAW
# now select only the relevant columns
# rename the columns as needed
# remove duplicates
meta_RAW %>%
select(C,H,N,O,S,P,
mass,`H.C`,`O.C`,
DBE, CRAM, `AI.mod`,
Class,
KM, NKM, KMD) %>%
dplyr::rename(
HC = `H.C`,
OC = `O.C`,
Mass = mass,
AI_mod = `AI.mod`) %>%
mutate(Mass = round(Mass,4), # round Mass to 4 decimal places. do this for all files so it is easy to merge later
HC = round(HC,2),
OC = round(OC,2))%>%
distinct()-> # this removes duplicates
meta_RAW_distinct
meta_RAW_distinct %>%
select(Mass,Class)->
meta_CLASS
meta_RAW_distinct %>%
select(Mass, C:P)->
meta_ELEMENTS
meta_RAW_distinct %>%
select(Mass, HC,OC)->
meta_HCOC
### OUTPUT
write.csv(meta_RAW_distinct,FTICR_META,row.names = FALSE)
write.csv(meta_CLASS,CLASS,row.names = FALSE)
write.csv(meta_ELEMENTS,ELEMENTS,row.names = FALSE)
write.csv(meta_HCOC,HCOC,row.names = FALSE)
#
## INPUT -- DATA ----
# these contain peaks seen in all 3 replicates. data have been pre-filtered.
## select specific columns within each file and then merge all
HW_PREFENTONGOETHITE %>%
select(mass, ends_with(".csv"))->
data_HW_PREFENTONGOETHITE
HW_POSTFENTONGOETHITE %>%
select(mass, ends_with(".csv"))->
data_HW_POSTFENTONGOETHITE
SW_PREFENTONGOETHITE %>%
select(mass, ends_with(".csv"))->
data_SW_PREFENTONGOETHITE
SW_POSTFENTONGOETHITE %>%
select(mass, ends_with(".csv"))->
data_SW_POSTFENTONGOETHITE
RAW_MERGED = merge(data_HW_PREFENTONGOETHITE, data_HW_POSTFENTONGOETHITE, by = "mass", all.x = T, all.y = T)
RAW_MERGED = merge(RAW_MERGED, data_SW_PREFENTONGOETHITE, by = "mass", all.x = T, all.y = T)
RAW_MERGED = merge(RAW_MERGED, data_SW_POSTFENTONGOETHITE, by = "mass", all.x = T, all.y = T)
RAW_MERGED %>%
dplyr::rename(Mass = mass) %>%
mutate(Mass = round(Mass,4)) %>% # round the mass to four decimals
gather(code, intensity, ends_with(".csv")) %>% # each sample is a different column, combine/gather them
na_if(.,"NA") %>% # replace "NA" lettering and 0 with NA
na_if(.,0) %>%
na.omit()-> # remove all rows with NA values
RAW_DATA
# merge this with the meta file
RAW_DATA2 = merge(RAW_DATA,meta_RAW_distinct,by = "Mass", all.y = T)
# now merge this with soil_key
raw_data_long = merge(SOIL_KEY,RAW_DATA2, by = "code")
### OUTPUT
write.csv(raw_data_long,FTICR_RAWMASTER_LONG,row.names = FALSE)
## compare meta files from raw vs. master formularity NOT DOING THIS NOW
# meta_processed = read.csv(FTICR_META)
#
# meta_processed2 = meta_processed %>%
#   select(Mass, El_comp, Class, HC, OC)
# meta_RAW_distinct2 = meta_RAW_distinct %>%
#   select(Mass, HC, OC, Class)
#
# meta_combined = merge(meta_processed2, meta_RAW_distinct2, by = "Mass")
#
## PROCESSING DATA FILES ----
# summarize by treatment and forest type
raw_data_long %>%
group_by(Forest, Treatment,Mass) %>%
dplyr::summarise(intensity = mean(intensity)) -> # calculate avg. intensity
data_processed_long
data_processed_long %>%
spread(Treatment,intensity)-> # then spread to create multiple columns
data_processed
### OUTPUT
write.csv(data_processed_long, FTICR_MASTER_LONG,row.names = FALSE)
data_processed_long %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::summarise(m = mean(intensity, na.rm = TRUE))
#
## create a new file for Fenton ----
# select only the relevant columns. don't include the Goethite columns
data_processed %>%
select(Mass,Forest, PreFenton, PostFenton) ->
data_fenton
# determine molecules lost and gained
data_fenton %>%
# create a conditional column for molecules that were lost, gained, or conserved
mutate(loss = case_when(!is.na(PreFenton) & is.na(PostFenton) ~ "lost",
is.na(PreFenton) & !is.na(PostFenton) ~ "gained",
!is.na(PreFenton) & !is.na(PostFenton) ~ "conserved"),
loss = factor(loss, levels = c("lost","gained","conserved"))) -> # order these levels
data_fenton
### OUTPUT
write.csv(data_fenton, FTICR_FENTON, na = "",row.names = FALSE)
#
## create a new file for goethite ----
data_processed_long %>%
# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) %>%
spread(goethite, intensity)->
data_goethite
# data_goethite %>%
#   dplyr::group_by(Forest, fenton) %>%
#   dplyr::summarise(preg = mean(PreGoethite, na.rm = TRUE),
#                    postg = mean(PostGoethite, na.rm = TRUE))
### OUTPUT
write.csv(data_goethite,FTICR_GOETHITE,na="",row.names = FALSE)
# we need to create columns for adsorbed vs. unbound.
# we will do that in the `abundance` script, because we need to calculate relative abundances for that
# ---------------------------------------------------------------------------- ----
### the code below was from the old script. not sure why I did this roundabout crap
# # split the MASTER file into two files, for pre-Goethite vs. post-Goethite. gather and add columns indicating whether pre or post F. and then combine.
# fticr_data_2 %>%
#   select(Mass, Forest, PreFenton,PostFenton)->
#   fticr_data_preg
#
# fticr_data_2 %>%
#   select(Mass, Forest, PreFentonGoethite,PostFentonGoethite)->
#   fticr_data_postg
#
# fticr_data_preg %>%
#   gather(Fenton, PreGoethite, PreFenton:PostFenton)->
#   fticr_data_preg2
#
# fticr_data_postg %>%
#   dplyr::rename(PreFenton = PreFentonGoethite) %>%
#   dplyr::rename(PostFenton = PostFentonGoethite) %>%
#   gather(Fenton, PostGoethite, PreFenton:PostFenton)->
#   fticr_data_postg2
#
# #fticr_data_goethite2 = cbind(fticr_data_preg2,fticr_data_postg2)
# fticr_data_goethite = merge(fticr_data_preg2,fticr_data_postg2)
# # `cbind` keeps duplicate columns, `merge` deletes duplicate columns
#
# ### OUTPUT
# write.csv(fticr_data_goethite,FTICR_GOETHITE,na="")
#
# ---------------------------------------------------------------------------- ----
#   adsorptive fractionation of SOM
#   Kaizad Patel
----------------------
----------------------
# DO NOT SOURCE SCRIPT #1.
# Run Script #1 separately, then start a new session (ctrl+shift+F10) and run this script.
.rs.restartR()
source("0-packages.R")
# INPUT FILES
meta = read.csv(FTICR_META)# <- "fticr/fticr_meta.csv" # all metadata about formula, etc. assignment for each m/z value
hcoc = read.csv(HCOC)
class = read.csv(CLASS)
elements = read.csv(ELEMENTS)
master = read.csv(FTICR_MASTER_LONG)# <- "fticr/fticr_master_long.csv" #
rawmaster = read.csv(FTICR_RAWMASTER_LONG)# <- "fticr/fticr_rawmaster_long.csv"
fenton = read.csv(FTICR_FENTON)# <- "fticr/fticr_fenton.csv" # pre- and post-Fenton data, intensities only
goethite = read.csv(FTICR_GOETHITE)# <- "fticr/fticr_goethite.csv" # pre- and post-Goethite data, intensities only
# ---------------------------------------------------------------------------- ----
# this was just to compare raw counts vs. processed counts in the final.
# not relevant any more because the processed came from the raw.
# rawmaster %>%
#   filter(Treatment=="PreFenton") %>%
#   filter(intensity>0) %>%
#   group_by(Mass, Forest) %>%
#   dplyr::summarise(intensity = mean(intensity))  %>%
#   spread(Forest, intensity)->
#   raw
# write.csv(raw, "raw.csv",na="")
#
# master %>%
#   filter(treatment=="PreFenton") %>%
#   filter(intensity>0) %>%
#   group_by(Mass, Forest) %>%
#   dplyr::summarise(intensity = mean(intensity)) %>%
#   spread(Forest, intensity)->
#   processed
# write.csv(processed, "master.csv", na="")
# ---------------------------------------------------------------------------- ----
# 1. relative intensity of each formula. and percentile ----
# this portion of the script will assign the molecules into quartiles based on relative abundance.
# this classification will be used in Van Krevelen diagrams
# `rawmaster` is the longform master file. calculate relative abundance of each molecule
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == "PreFenton"| Treatment=="PostFenton") %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
# then create a column for quartiles
relative_intensity %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(percentile = ntile(rel_abund, 100)) %>%
mutate(perc = cut(percentile,
breaks = c(-Inf,25, 50, 75, Inf),
labels = c("lowest 25%", "third 25 %", "second 25 %", "top 25 %")))->
relative_intensity_percentile
# remove unnecessary columns
relative_intensity_percentile %>%
select(-intensity, -total, -percentile)->
relative_intensity_percentile
# merge with the hcoc file
relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x=T)
# relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x = T)
ggplot(relative_intensity_percentile, aes(x = OC,y = HC, color = perc))+
geom_point(alpha = 0.6)+
scale_color_brewer(palette = "Reds")+
facet_grid(Forest~Treatment)
### OUTPUT
write.csv(relative_intensity_percentile, PERCENTILE, row.names = FALSE)
# this file will be used for the Van Krevelen plots (preFenton and postFenton)
#
# ---------------------------------------------------------------------------- ----
# 2. RELATIVE ABUNDANCE FOR PRE- AND POST-FENTON GROUPS ----
# `rawmaster` is the longform master file.
# summarizing by groups
rawmaster %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Goethite == "PreGoethite") %>% # keep only pre-Goethite data. we don't want post-adsorption data
group_by(Forest,Fenton,soil,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(intensity), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(soil) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
raw_coregroups
# ^^^ this file has relative abundance of each group for each core
# now we need to summarize this for each treatment. combine all cores
raw_coregroups %>%
group_by(Forest, Fenton, Class) %>%
dplyr::summarise(rel_abund = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
dplyr::mutate(rel_abund = round(rel_abund,2),
se = round(se,2),
relativeabund = paste(rel_abund,"\u00B1",se))->
raw_groups
# now do Tukey HSD
fit_hsd <- function(dat) {
a <-aov(relabund ~ Fenton, data = dat)
h <-HSD.test(a,"Fenton")
#create a tibble with one column for each treatment
#the hsd results are row1 = drought, row2 = saturation, row3 = time zero saturation, row4 = field moist. hsd letters are in column 2
tibble(`PreFenton` = h$groups["PreFenton",2],
`PostFenton` = h$groups["PostFenton",2])
}
raw_coregroups %>%
group_by(Forest, Class) %>%
do(fit_hsd(.)) %>%
# ^ the script above creates a data.frame with columns `Forest`, `Class`, `PreFenton`,`PostFenton`
# in the same command, we are gathering the PreFenton and PostFenton columns into a single column, `Fenton`. hashtag efficiency
gather(Fenton, hsd, 3:4)->
hsd
# now combine `raw_groups` with `hsd`
raw_groups_hsd = merge(raw_groups,hsd, by = c("Forest", "Fenton","Class"))
# now combine the `relativeabund` and `hsd` columns and then remove all unnecessary columns
raw_groups_hsd %>%
mutate(relabund_hsd = paste(relativeabund, hsd)) %>%
select(-se, -relativeabund,-hsd)->
raw_groups_hsd
### OUTPUT
write.csv(raw_groups_hsd,RELATIVE_ABUND, row.names = FALSE)
# write_csv(fticr_relabundance_summary_summarytable,path = "output/table1_relabundance_groups_bytrt.csv")
## Elements ----
master_el = merge(master, elements, by = "Mass")
master_el %>%
filter(Treatment=="PreFenton"| Treatment=="PostFenton") %>%  # choose only the preGoethite samples
gather(element, el_count, C:P) %>%
# replace all 0 by NA and then remove NA to help with calculations
na_if(.,"0") %>% # replace NA with 0
na.omit() %>%
group_by(Forest, Treatment, element) %>%
dplyr::summarise(avg = mean(el_count)) %>%
ungroup %>%
dplyr::mutate(avg = round(avg,0))->
master_el
### OUTPUT
write.csv(master_el, SUMMARY_ELEMENTS, row.names = FALSE)
#
# ---------------------------------------------------------------------------- ----
# 2. PEAK COUNTS ----
## 2.1 INITIAL PEAK COUNTS ----
# we want to determine the total peaks in HW vs. SW
# as well as the number of peaks in each group type
# rawmaster
rawmaster %>%
filter(Treatment=="PreFenton") %>%
filter(intensity>0) %>%
group_by(Mass, Forest,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Forest,Class) %>%
dplyr::summarize(peaks = n()) %>%
# get totals
ungroup %>%
group_by(Forest) %>%
dplyr::mutate(total = sum(peaks))->
counts
## 2.2 FENTON PEAK COUNTS  ----
# to determine peak counts in pre- vs. post-Fenton extracts
rawmaster %>%
filter(Goethite=="PreGoethite") %>%
filter(intensity>0) %>%
group_by(Mass,Fenton,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Fenton,Class) %>%
dplyr::summarize(peaks = n()) %>%
ungroup %>%
group_by(Fenton) %>%
dplyr::mutate(total = sum(peaks))->
fenton_counts
## 2.3 GOETHITE PEAK COUNTS  ----
rawmaster %>%
filter(intensity>0) %>%
group_by(Mass,Goethite,Fenton,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Fenton,Goethite,Class) %>%
dplyr::summarize(peaks = n()) %>%
ungroup %>%
group_by(Fenton,Goethite) %>%
dplyr::mutate(total = sum(peaks))->
goethite_counts
#
# ---------------------------------------------------------------------------- ----
# FENTON relative abundance lost vs. gained ----
# merge `fenton` file with `relative_intensity_percentile`
fenton_loss = merge(fenton, relative_intensity_percentile, by = c("Mass", "Forest"))
ggplot(fenton_loss[!fenton_loss$loss=="conserved",], aes(x = OC,y = HC, color = loss))+
geom_point(alpha = 0.5)+
scale_color_brewer(palette = "Dark2")+
facet_wrap(~Forest)
### OUTPUT
write.csv(fenton_loss, FENTON_LOSS)
# ---------------------------------------------------------------------------- ----
# GOETHITE adsorbed vs. non-adsorbed  ----
## .1 determining adsorbed vs. not adsorbed molecules ----
## NOT DOING THIS FOR NOW
##    # (binary classification)
##    # Using S/N method of Avneri-Katz 2017
##    # find minimum intensity
##    # divide all by minimum. if >2, SN = 10
##    # but first, convert all zero to NA
##
##    fticr_data_goethite[fticr_data_goethite==0]<-NA
##    minimum = min(c(fticr_data_goethite$PreGoethite, fticr_data_goethite$PostGoethite), na.rm = TRUE)
##
##    # then convert NA back to 0
##    fticr_data_goethite[is.na(fticr_data_goethite)]<-0
##
##    # create a column for adsorbed/not adsorbed
##    setDT(fticr_data_goethite)[PreGoethite/minimum >2 & PostGoethite/minimum < 1, adsorbed := "adsorbed"]
##    fticr_data_goethite[PreGoethite/minimum >2 & PostGoethite/minimum > 1, adsorbed := "not adsorbed"]
##
##    # create a column for new molecules created post-adsorption
##    setDT(fticr_data_goethite)[PreGoethite/minimum == 0 & PostGoethite/minimum > 1, new := "new molecules"]
##
##    ### OUTPUT
##    write_csv(fticr_data_goethite,path = "fticr/fticr_data_goethite.csv")
##
#
## .2 relative strength of sorption ----
# technique from Williams, Borch et al. 2018. Soil Systems
# Calculate relative abundance of each formula in the PreG and PostG samples.
# Subtract PostG-PreG to calculate delta-abundance.
# Use delta-abundance to group the molecules into seven classes:
# < -0.00015 = most sorbed | -0.00010 = more sorbed | -0.00005 = sorbed | 0.00005 = minimal change | 0.00010 = unbound | 0.00015 = more unbound | > 0.00015 = most unbound,
# ALL the calculations are done in one step.
goethite %>%
mutate(fenton = factor(fenton, levels = c("PreFenton","PostFenton"))) %>% # order the levels
dplyr::group_by(Forest,fenton) %>%
# replace all NA with 0
replace(., is.na(.),0) %>%
# new columns for pre-goethite and post-goethite total intensities
dplyr::mutate(preg_total = sum(PreGoethite, na.rm = TRUE),
postg_total = sum(PostGoethite, na.rm = TRUE)) %>%
# new columns for relative abundance as fraction
mutate(preg_rel_abund = PreGoethite/preg_total) %>%
mutate(postg_rel_abund = PostGoethite/postg_total) %>%
# subtract post-pre relative abundance
mutate(delta_abund = postg_rel_abund - preg_rel_abund) %>%
# create a column for binning
mutate(sorption_frac = cut(delta_abund,
breaks = c(-Inf,-0.00015, -0.00010, -0.00005, 0.00005,0.00010,0.00015,Inf),
labels = c("most sorbed", "more sorbed", "sorbed", "minimal change","unbound","more unbound","most unbound"))) ->
# cleaning up: remove unnecessary columnns
#  select(-(preg_total:delta_abund))->
goethite_sorption
goethite_sorption = merge(goethite_sorption,hcoc, by = "Mass", all.x = T)
### OUTPUT
write.csv(goethite_sorption, GOETHITE_ADSORPTION, row.names = FALSE)
ggplot(goethite_sorption, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
#
# ---------------------------------------------------------------------------- ----
# GOETHITE relative abundance of sorbed vs. unsorbed groups ----
# first, subset the goethite_relabund file
goethite_sorption %>%
select(Mass, Forest, fenton, PreGoethite, sorption_frac) %>%
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
filter(sorption_frac=="most sorbed"| sorption_frac=="most unbound")->
goethite_subset
# merge with the class meta file
goethite_subset = merge(goethite_subset, class , by = "Mass", all.x = T)
## # remove the "Other" class
## data_goethite_adsorbed %>%
##   filter(!Class=="Other")->
##   data_goethite_adsorbed
# fticr_data_goethite_relabund_adsorbed = fticr_data_goethite_relabund_adsorbed[
#  !fticr_data_goethite_relabund_adsorbed$Class=="Other",]
# now follow steps for relative abundance of groups
#
goethite_subset %>%
group_by(Forest,fenton,sorption_frac,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(PreGoethite), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(Forest, fenton, sorption_frac) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
goethite_relabund
## checking that the numbers still hold up when combined by forest type. they do.
# goethite_adsorbed_relabund %>%
#   group_by(fenton, sorption_frac,Class) %>%
#   dplyr::summarize(relab = mean(relabund)) %>%
#   ungroup() %>%
#   group_by(fenton,sorption_frac) %>%
#   dplyr::summarise(rel = sum(relab))
ggplot(goethite_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "summary", position = position_dodge())+
facet_wrap(~fenton)
## use this in the graph for relative distribution
### OUTPUT
write.csv(goethite_relabund,GOETHITE_RELABUND, row.names = FALSE)
