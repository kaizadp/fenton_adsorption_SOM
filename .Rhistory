# create columns for goethite and fenton
mutate(goethite = if_else((Treatment=="PreFentonGoethite"|Treatment=="PostFentonGoethite"),"PostGoethite","PreGoethite"),
fenton = if_else((Treatment=="PreFenton"|Treatment=="PreFentonGoethite"),"PreFenton","PostFenton")) %>%
ungroup %>%
select(-Treatment) %>%
spread(goethite, intensity)->
data_goethite
# data_goethite %>%
#   dplyr::group_by(Forest, fenton) %>%
#   dplyr::summarise(preg = mean(PreGoethite, na.rm = TRUE),
#                    postg = mean(PostGoethite, na.rm = TRUE))
### OUTPUT
write.csv(data_goethite,FTICR_GOETHITE,na="",row.names = FALSE)
# we need to create columns for adsorbed vs. unbound.
# we will do that in the `abundance` script, because we need to calculate relative abundances for that
# ---------------------------------------------------------------------------- ----
### the code below was from the old script. not sure why I did this roundabout crap
# # split the MASTER file into two files, for pre-Goethite vs. post-Goethite. gather and add columns indicating whether pre or post F. and then combine.
# fticr_data_2 %>%
#   select(Mass, Forest, PreFenton,PostFenton)->
#   fticr_data_preg
#
# fticr_data_2 %>%
#   select(Mass, Forest, PreFentonGoethite,PostFentonGoethite)->
#   fticr_data_postg
#
# fticr_data_preg %>%
#   gather(Fenton, PreGoethite, PreFenton:PostFenton)->
#   fticr_data_preg2
#
# fticr_data_postg %>%
#   dplyr::rename(PreFenton = PreFentonGoethite) %>%
#   dplyr::rename(PostFenton = PostFentonGoethite) %>%
#   gather(Fenton, PostGoethite, PreFenton:PostFenton)->
#   fticr_data_postg2
#
# #fticr_data_goethite2 = cbind(fticr_data_preg2,fticr_data_postg2)
# fticr_data_goethite = merge(fticr_data_preg2,fticr_data_postg2)
# # `cbind` keeps duplicate columns, `merge` deletes duplicate columns
#
# ### OUTPUT
# write.csv(fticr_data_goethite,FTICR_GOETHITE,na="")
#
# ---------------------------------------------------------------------------- ----
# DO NOT SOURCE SCRIPT #1.
# Run Script #1 separately, then start a new session (ctrl+shift+F10) and run this script.
.rs.restartR()
source("0-packages.R")
# INPUT FILES
meta = read.csv(FTICR_META)# <- "fticr/fticr_meta.csv" # all metadata about formula, etc. assignment for each m/z value
hcoc = read.csv(HCOC)
class = read.csv(CLASS)
elements = read.csv(ELEMENTS)
master = read.csv(FTICR_MASTER_LONG)# <- "fticr/fticr_master_long.csv" #
rawmaster = read.csv(FTICR_RAWMASTER_LONG)# <- "fticr/fticr_rawmaster_long.csv"
#   adsorptive fractionation of SOM
#   Kaizad Patel
----------------------
----------------------
# DO NOT SOURCE SCRIPT #1.
# Run Script #1 separately, then start a new session (ctrl+shift+F10) and run this script.
.rs.restartR()
source("0-packages.R")
# INPUT FILES
meta = read.csv(FTICR_META)# <- "fticr/fticr_meta.csv" # all metadata about formula, etc. assignment for each m/z value
hcoc = read.csv(HCOC)
class = read.csv(CLASS)
elements = read.csv(ELEMENTS)
master = read.csv(FTICR_MASTER_LONG)# <- "fticr/fticr_master_long.csv" #
rawmaster = read.csv(FTICR_RAWMASTER_LONG)# <- "fticr/fticr_rawmaster_long.csv"
fenton = read.csv(FTICR_FENTON)# <- "fticr/fticr_fenton.csv" # pre- and post-Fenton data, intensities only
goethite = read.csv(FTICR_GOETHITE)# <- "fticr/fticr_goethite.csv" # pre- and post-Goethite data, intensities only
# ---------------------------------------------------------------------------- ----
# this was just to compare raw counts vs. processed counts in the final.
# not relevant any more because the processed came from the raw.
rawmaster %>%
filter(Treatment=="PreFenton") %>%
filter(intensity>0) %>%
group_by(Mass, Forest) %>%
dplyr::summarise(intensity = mean(intensity))  %>%
spread(Forest, intensity)->
raw
write.csv(raw, "raw.csv",na="")
master %>%
filter(treatment=="PreFenton") %>%
filter(intensity>0) %>%
group_by(Mass, Forest) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
spread(Forest, intensity)->
processed
write.csv(processed, "master.csv", na="")
# ---------------------------------------------------------------------------- ----
# 1. relative intensity of each formula. and percentile ----
# this portion of the script will assign the molecules into quartiles based on relative abundance.
# this classification will be used in Van Krevelen diagrams
# `rawmaster` is the longform master file. calculate relative abundance of each molecule
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == "PreFenton"| Treatment=="PostFenton") %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
# then create a column for quartiles
relative_intensity %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(percentile = ntile(rel_abund, 100)) %>%
mutate(perc = cut(percentile,
breaks = c(-Inf,25, 50, 75, Inf),
labels = c("lowest 25%", "third 25 %", "second 25 %", "top 25 %")))->
relative_intensity_percentile
# remove unnecessary columns
relative_intensity_percentile %>%
select(-intensity, -total, -percentile)->
relative_intensity_percentile
# merge with the hcoc file
relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x=T)
# relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x = T)
ggplot(relative_intensity_percentile, aes(x = OC,y = HC, color = perc))+
geom_point(alpha = 0.6)+
scale_color_brewer(palette = "Reds")+
facet_grid(Forest~Treatment)
### OUTPUT
write.csv(relative_intensity_percentile, PERCENTILE, row.names = FALSE)
# this file will be used for the Van Krevelen plots (preFenton and postFenton)
#
# ---------------------------------------------------------------------------- ----
# 2. RELATIVE ABUNDANCE FOR PRE- AND POST-FENTON GROUPS ----
# `rawmaster` is the longform master file.
# summarizing by groups
rawmaster %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Goethite == "PreGoethite") %>% # keep only pre-Goethite data. we don't want post-adsorption data
group_by(Forest,Fenton,soil,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(intensity), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(soil) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
raw_coregroups
# ^^^ this file has relative abundance of each group for each core
# now we need to summarize this for each treatment. combine all cores
raw_coregroups %>%
group_by(Forest, Fenton, Class) %>%
dplyr::summarise(rel_abund = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
dplyr::mutate(rel_abund = round(rel_abund,2),
se = round(se,2),
relativeabund = paste(rel_abund,"\u00B1",se))->
raw_groups
# now do Tukey HSD
fit_hsd <- function(dat) {
a <-aov(relabund ~ Fenton, data = dat)
h <-HSD.test(a,"Fenton")
#create a tibble with one column for each treatment
#the hsd results are row1 = drought, row2 = saturation, row3 = time zero saturation, row4 = field moist. hsd letters are in column 2
tibble(`PreFenton` = h$groups["PreFenton",2],
`PostFenton` = h$groups["PostFenton",2])
}
raw_coregroups %>%
group_by(Forest, Class) %>%
do(fit_hsd(.)) %>%
# ^ the script above creates a data.frame with columns `Forest`, `Class`, `PreFenton`,`PostFenton`
# in the same command, we are gathering the PreFenton and PostFenton columns into a single column, `Fenton`. hashtag efficiency
gather(Fenton, hsd, 3:4)->
hsd
# now combine `raw_groups` with `hsd`
raw_groups_hsd = merge(raw_groups,hsd, by = c("Forest", "Fenton","Class"))
# now combine the `relativeabund` and `hsd` columns and then remove all unnecessary columns
raw_groups_hsd %>%
mutate(relabund_hsd = paste(relativeabund, hsd)) %>%
select(-se, -relativeabund,-hsd)->
raw_groups_hsd
### OUTPUT
write.csv(raw_groups_hsd,RELATIVE_ABUND, row.names = FALSE)
# write_csv(fticr_relabundance_summary_summarytable,path = "output/table1_relabundance_groups_bytrt.csv")
## Elements ----
master_el = merge(master, elements, by = "Mass")
master_el %>%
filter(Treatment=="PreFenton"| Treatment=="PostFenton") %>%  # choose only the preGoethite samples
gather(element, el_count, C:P) %>%
# replace all 0 by NA and then remove NA to help with calculations
na_if(.,"0") %>% # replace NA with 0
na.omit() %>%
group_by(Forest, Treatment, element) %>%
dplyr::summarise(avg = mean(el_count)) %>%
ungroup %>%
dplyr::mutate(avg = round(avg,0))->
master_el
### OUTPUT
write.csv(master_el, SUMMARY_ELEMENTS, row.names = FALSE)
#
# ---------------------------------------------------------------------------- ----
# 2. PEAK COUNTS ----
## 2.1 INITIAL PEAK COUNTS ----
# we want to determine the total peaks in HW vs. SW
# as well as the number of peaks in each group type
# rawmaster
rawmaster %>%
filter(Treatment=="PreFenton") %>%
filter(intensity>0) %>%
group_by(Mass, Forest,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Forest,Class) %>%
dplyr::summarize(peaks = n()) %>%
# get totals
ungroup %>%
group_by(Forest) %>%
dplyr::mutate(total = sum(peaks))->
counts
## 2.2 FENTON PEAK COUNTS  ----
# to determine peak counts in pre- vs. post-Fenton extracts
rawmaster %>%
filter(Goethite=="PreGoethite") %>%
filter(intensity>0) %>%
group_by(Mass,Fenton,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Fenton,Class) %>%
dplyr::summarize(peaks = n()) %>%
ungroup %>%
group_by(Fenton) %>%
dplyr::mutate(total = sum(peaks))->
fenton_counts
## 2.3 GOETHITE PEAK COUNTS  ----
rawmaster %>%
filter(intensity>0) %>%
group_by(Mass,Goethite,Fenton,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Fenton,Goethite,Class) %>%
dplyr::summarize(peaks = n()) %>%
ungroup %>%
group_by(Fenton,Goethite) %>%
dplyr::mutate(total = sum(peaks))->
goethite_counts
#
# ---------------------------------------------------------------------------- ----
# FENTON relative abundance lost vs. gained ----
# merge `fenton` file with `relative_intensity_percentile`
fenton_loss = merge(fenton, relative_intensity_percentile, by = c("Mass", "Forest"))
ggplot(fenton_loss[!fenton_loss$loss=="conserved",], aes(x = OC,y = HC, color = loss))+
geom_point(alpha = 0.5)+
scale_color_brewer(palette = "Dark2")+
facet_wrap(~Forest)
# ---------------------------------------------------------------------------- ----
# GOETHITE adsorbed vs. non-adsorbed  ----
## .1 determining adsorbed vs. not adsorbed molecules ----
## NOT DOING THIS FOR NOW
##    # (binary classification)
##    # Using S/N method of Avneri-Katz 2017
##    # find minimum intensity
##    # divide all by minimum. if >2, SN = 10
##    # but first, convert all zero to NA
##
##    fticr_data_goethite[fticr_data_goethite==0]<-NA
##    minimum = min(c(fticr_data_goethite$PreGoethite, fticr_data_goethite$PostGoethite), na.rm = TRUE)
##
##    # then convert NA back to 0
##    fticr_data_goethite[is.na(fticr_data_goethite)]<-0
##
##    # create a column for adsorbed/not adsorbed
##    setDT(fticr_data_goethite)[PreGoethite/minimum >2 & PostGoethite/minimum < 1, adsorbed := "adsorbed"]
##    fticr_data_goethite[PreGoethite/minimum >2 & PostGoethite/minimum > 1, adsorbed := "not adsorbed"]
##
##    # create a column for new molecules created post-adsorption
##    setDT(fticr_data_goethite)[PreGoethite/minimum == 0 & PostGoethite/minimum > 1, new := "new molecules"]
##
##    ### OUTPUT
##    write_csv(fticr_data_goethite,path = "fticr/fticr_data_goethite.csv")
##
#
## .2 relative strength of sorption ----
# technique from Williams, Borch et al. 2018. Soil Systems
# Calculate relative abundance of each formula in the PreG and PostG samples.
# Subtract PostG-PreG to calculate delta-abundance.
# Use delta-abundance to group the molecules into seven classes:
# < -0.00015 = most sorbed | -0.00010 = more sorbed | -0.00005 = sorbed | 0.00005 = minimal change | 0.00010 = unbound | 0.00015 = more unbound | > 0.00015 = most unbound,
# ALL the calculations are done in one step.
goethite %>%
mutate(fenton = factor(fenton, levels = c("PreFenton","PostFenton"))) %>% # order the levels
dplyr::group_by(Forest,fenton) %>%
# replace all NA with 0
replace(., is.na(.),0) %>%
# new columns for pre-goethite and post-goethite total intensities
dplyr::mutate(preg_total = sum(PreGoethite, na.rm = TRUE),
postg_total = sum(PostGoethite, na.rm = TRUE)) %>%
# new columns for relative abundance as fraction
mutate(preg_rel_abund = PreGoethite/preg_total) %>%
mutate(postg_rel_abund = PostGoethite/postg_total) %>%
# subtract post-pre relative abundance
mutate(delta_abund = postg_rel_abund - preg_rel_abund) %>%
# create a column for binning
mutate(sorption_frac = cut(delta_abund,
breaks = c(-Inf,-0.00015, -0.00010, -0.00005, 0.00005,0.00010,0.00015,Inf),
labels = c("most sorbed", "more sorbed", "sorbed", "minimal change","unbound","more unbound","most unbound"))) ->
# cleaning up: remove unnecessary columnns
#  select(-(preg_total:delta_abund))->
goethite_relabund
goethite_relabund = merge(goethite_relabund,hcoc, by = "Mass", all.x = T)
### OUTPUT
write.csv(goethite_relabund, GOETHITE_ADSORPTION, row.names = FALSE)
ggplot(goethite_relabund, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
#
# ---------------------------------------------------------------------------- ----
# GOETHITE relative abundance of sorbed vs. unsorbed groups ----
# first, subset the goethite_relabund file
goethite_relabund %>%
select(Mass, Forest, fenton, PreGoethite, sorption_frac)->
goethite_adsorbed
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
goethite_adsorbed %>%
filter(sorption_frac=="most sorbed"| sorption_frac=="most unbound")->
goethite_adsorbed
# merge with the class meta file
goethite_adsorbed = merge(goethite_adsorbed, class , by = "Mass", all.x = T)
## # remove the "Other" class
## data_goethite_adsorbed %>%
##   filter(!Class=="Other")->
##   data_goethite_adsorbed
# fticr_data_goethite_relabund_adsorbed = fticr_data_goethite_relabund_adsorbed[
#  !fticr_data_goethite_relabund_adsorbed$Class=="Other",]
# now follow steps for relative abundance of groups
#
goethite_adsorbed %>%
group_by(Forest,fenton,sorption_frac,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(PreGoethite), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(Forest, fenton, sorption_frac) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
goethite_adsorbed_relabund
ggplot(goethite_adsorbed_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "identity", position = position_dodge())+
facet_grid(fenton~Forest)
## use this in the graph for relative distribution
### OUTPUT
write.csv(goethite_adsorbed_relabund,GOETHITE_ADSORPTION, row.names = FALSE)
#
# ---------------------------------------------------------------------------- ----
#
# ---------------------------------------------------------------------------- ----
# 4 summary of groups ----
#
## 4.2 summary of peaks for fenton and goethite ----
### PEAKS, not INTENSITIES
# create a single file that has fenton anf goethite information
# merge the fenton and goethite files
data_fg_merged = merge(fticr_data_fenton,fticr_data_goethite, by = c("Mass","Forest"), all = T)
names(data_fg_merged)
# select only the relevant columns for fenton loss, goethite adsorbed, and goethite new
data_fg_merged %>%
select(Mass, Forest, loss, adsorbed, new) %>%
dplyr::rename(fenton_loss = loss) %>%
dplyr::rename(goethite_new = new) %>%
mutate(Mass = round(Mass,4))->
data_fg_merged2
# merge with meta_class
data_fg_merged3 = merge(data_fg_merged2,fticr_meta_class, by = "Mass", all.x = T)
# get counts by group and treatment
data_fentoncounts = summarySE(data_fg_merged3, measurevar = "Mass",
groupvars = c("Forest","fenton_loss","Class"),
na.rm = TRUE)
data_fentoncounts %>%
select(1:4)->
data_fentoncounts2
data_adsorbedcounts = summarySE(data_fg_merged3, measurevar = "Mass",
groupvars = c("Forest","adsorbed","Class"),
na.rm = TRUE)
data_adsorbedcounts %>%
select(1:4)->
data_adsorbedcounts2
data_goethite_newcounts = summarySE(data_fg_merged3, measurevar = "Mass",
groupvars = c("Forest","goethite_new","Class"),
na.rm = TRUE)
data_goethite_newcounts %>%
select(1:4)->
data_goethite_newcounts2
### OUTPUT
write_csv(data_fentoncounts2, path = "fticr/data_fentoncounts2.csv")
write_csv(data_adsorbedcounts2, path = "fticr/data_adsorbedcounts2.csv")
write_csv(data_goethite_newcounts2, path = "fticr/data_goethite_newcounts2.csv")
## create summary tables of the counts
data_fentoncounts_summarytable = dcast(data_fentoncounts2[!is.na(data_fentoncounts2$fenton_loss),],
Forest+fenton_loss~Class,value.var = "N")
data_adsorbedcounts_summarytable = dcast(data_adsorbedcounts2[!is.na(data_adsorbedcounts2$adsorbed),],
Forest+adsorbed~Class,value.var = "N")
data_goethite_newcounts_summarytable = dcast(data_goethite_newcounts2[!is.na(data_goethite_newcounts2$goethite_new),],
Forest+goethite_new~Class,value.var = "N")
write_csv(data_fentoncounts_summarytable, path = "fticr/data_fentoncounts_summarytable.csv")
write_csv(data_adsorbedcounts_summarytable, path = "fticr/data_adsorbedcounts_summarytable.csv")
write_csv(data_goethite_newcounts_summarytable, path = "fticr/data_goethite_newcounts_summarytable.csv")
#
## 4.3 summary of elements for initial ####
# merge data_raw_long with meta_class
fticr_data_2_el = merge(fticr_data_2, fticr_meta_elements, by = "Mass", all.x = T)
# remove unnecessary columns and gather the elements
fticr_data_2_el %>%
select(-PreFentonGoethite, -PostFentonGoethite) %>%
gather(fenton, intensity, PreFenton:PostFenton) %>%
gather(element, el_ratio, C:Na)->
fticr_data_2_el2
# replace 0 counts with NA and then remove all NA
fticr_data_2_el2[fticr_data_2_el2==0]<-NA
fticr_data_2_el2 = fticr_data_2_el2[complete.cases(fticr_data_2_el2),]
# get element counts
fticr_data_el_count = summarySE(fticr_data_2_el2, measurevar = "el_ratio",
groupvars = c("Forest","fenton","element"),
na.rm = TRUE)
fticr_data_el_count$summary = paste(round(fticr_data_el_count$el_ratio,1), "\u00B1", round(fticr_data_el_count$se,1))
data_prefenton_el_summarytable = dcast(fticr_data_el_count,
element~Forest+fenton, value.var = "summary")
#### OUTPUT
write_csv(data_prefenton_el_summarytable, path = "fticr/fticr_prefenton_el_counts.csv")
#
## 4.4 summary of elements for fenton and goethite ----
# merge data_fg_merged2 with meta_class
data_fg_merged_el = merge(data_fg_merged2,fticr_meta_elements, by = "Mass", all.x = T)
# gather the elements into a single column
data_fg_merged_el %>%
gather(element, el_ratio, C:Na)->
data_fg_merged_el2
# get element counts for fenton
data_fenton_el = summarySE(data_fg_merged_el2, measurevar = "el_ratio",
groupvars = c("Forest","fenton_loss","element"),
na.rm = TRUE)
# remove NA
data_fenton_el = data_fenton_el[complete.cases(data_fenton_el),]
data_fenton_el$el_ratio = round(data_fenton_el$el_ratio,1)
data_fenton_el_summarytable = dcast(data_fenton_el,
element~Forest+fenton_loss, value.var = "el_ratio")
#
# for goethite, use file fticr_data_goethite
# merge with fticr_meta_elements and then repeat the same process
fticr_data_goethite_el = merge(fticr_data_goethite, fticr_meta_elements, by = "Mass", all.x = T)
# gather
fticr_data_goethite_el %>%
gather(element, el_ratio, C:Na)->
fticr_data_goethite_el2
data_goethite_adsorbed_el = summarySE(fticr_data_goethite_el2, measurevar = "el_ratio",
groupvars = c("Forest","Fenton","adsorbed","element"),
na.rm = TRUE)
# remove NA
data_goethite_adsorbed_el = data_goethite_adsorbed_el[complete.cases(data_goethite_adsorbed_el),]
data_goethite_adsorbed_el$el_ratio = round(data_goethite_adsorbed_el$el_ratio,1)
data_goethite_adsorbed_el_summarytable = dcast(data_goethite_adsorbed_el,
adsorbed+element~Forest+Fenton, value.var = "el_ratio")
#
# now repeat the goethite stuff for new molecules
data_goethite_new_el = summarySE(fticr_data_goethite_el2, measurevar = "el_ratio",
groupvars = c("Forest","Fenton","new","element"),
na.rm = TRUE)
# remove NA
data_goethite_new_el = data_goethite_new_el[complete.cases(data_goethite_new_el),]
data_goethite_new_el$el_ratio = round(data_goethite_new_el$el_ratio,1)
data_goethite_new_el_summarytable = dcast(data_goethite_new_el,
element~Forest+Fenton, value.var = "el_ratio")
### OUTPUT
write_csv(data_fenton_el_summarytable, path = "fticr/data_fenton_el_counts.csv")
write_csv(data_goethite_adsorbed_el_summarytable, path = "fticr/data_goethite_ads_el_counts.csv")
write_csv(data_goethite_new_el_summarytable, path = "fticr/data_goethite_new_el_counts.csv")
#
# ---------------------------------------------------------------------------- ----
# 4. COUNTS for Venn diagram ----
fticr_data_3 %>%
filter(intensity>0) %>%
group_by(Forest, treatment) %>%
dplyr::summarise(counts = length(Mass))->
fticr_data_counts
fticr_data_counts2 = summarySE(fticr_data_3[!fticr_data_3$intensity==0,],
measurevar = "Mass", groupvars = c("treatment"), na.rm = TRUE)
fticr_data_counts3 = summarySE(fticr_data_3[!fticr_data_3$intensity==0,],
measurevar = "Mass", groupvars = c("Forest","treatment"), na.rm = TRUE)
# counts of HW vs. SW in native (initial) SOM
fticr_data_3 %>%
filter(treatment=="PreFenton") %>% # select only the initial samples
dcast(Mass~Forest+treatment, value.var = "intensity") %>% # wide-form, so forests are in separate columns
na_if(.,"0") %>% # replace NA with 0
#code for unique vs. both forests
dplyr::mutate(counts = case_when(HW_PreFenton>0 & SW_PreFenton>0 ~"both",
HW_PreFenton>0 & is.na(SW_PreFenton) ~"HW",
is.na(HW_PreFenton) & SW_PreFenton>0 ~"SW")) %>%
group_by(counts)%>%
dplyr::summarise(initial = length(Mass))-> # create a final dataframe with just the counts
fticr_initial_counts
# counts of PreFenton vs. PostFenton. ignoring forest type
fticr_data_3 %>%
filter(treatment=="PreFenton"| treatment == "PostFenton") %>% # select only the Pre-Goethite samples
na_if(.,"0") %>%
group_by(Mass,treatment) %>%
dplyr::summarise(intensity= mean(intensity)) %>%
dcast(Mass~treatment, value.var = "intensity") %>% # wide-form, so treatments are in separate columns
na_if(.,"0") %>% # replace NA with 0
#code for unique vs. both forests
dplyr::mutate(counts = case_when(PreFenton>0 & PostFenton>0 ~"both",
PreFenton>0 & is.na(PostFenton) ~"PostFenton",
is.na(PreFenton) & PostFenton>0 ~"PreFenton")) %>%
group_by(counts)%>%
dplyr::summarise(Fenton = length(Mass))-> # create a final dataframe with just the counts
fticr_fenton_counts
