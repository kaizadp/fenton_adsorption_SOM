----------------------
# DO NOT SOURCE SCRIPT #1.
# Run Script #1 separately, then start a new session (ctrl+shift+F10) and run this script.
.rs.restartR()
source("0-packages.R")
# INPUT FILES
meta = read.csv(FTICR_META)# <- "fticr/fticr_meta.csv" # all metadata about formula, etc. assignment for each m/z value
hcoc = read.csv(HCOC)
class = read.csv(CLASS)
elements = read.csv(ELEMENTS)
master = read.csv(FTICR_MASTER_LONG)# <- "fticr/fticr_master_long.csv" #
rawmaster = read.csv(FTICR_RAWMASTER_LONG)# <- "fticr/fticr_rawmaster_long.csv"
fenton = read.csv(FTICR_FENTON)# <- "fticr/fticr_fenton.csv" # pre- and post-Fenton data, intensities only
goethite = read.csv(FTICR_GOETHITE)# <- "fticr/fticr_goethite.csv" # pre- and post-Goethite data, intensities only
# ---------------------------------------------------------------------------- ----
# this was just to compare raw counts vs. processed counts in the final.
# not relevant any more because the processed came from the raw.
# rawmaster %>%
#   filter(Treatment=="PreFenton") %>%
#   filter(intensity>0) %>%
#   group_by(Mass, Forest) %>%
#   dplyr::summarise(intensity = mean(intensity))  %>%
#   spread(Forest, intensity)->
#   raw
# write.csv(raw, "raw.csv",na="")
#
# master %>%
#   filter(treatment=="PreFenton") %>%
#   filter(intensity>0) %>%
#   group_by(Mass, Forest) %>%
#   dplyr::summarise(intensity = mean(intensity)) %>%
#   spread(Forest, intensity)->
#   processed
# write.csv(processed, "master.csv", na="")
# ---------------------------------------------------------------------------- ----
# 1. relative intensity of each formula. and percentile ----
# this portion of the script will assign the molecules into quartiles based on relative abundance.
# this classification will be used in Van Krevelen diagrams
# `rawmaster` is the longform master file. calculate relative abundance of each molecule
master %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Treatment == "PreFenton"| Treatment=="PostFenton") %>% # keep only pre-Goethite data. we don't want post-adsorption data
na.omit %>% # remove all NA, or it won't calculate
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(total = sum(intensity)) %>% # add a new column calculating total intensity
dplyr::mutate(rel_abund = (intensity/total)*100)-> # calculate relative intensity as a %
relative_intensity
# then create a column for quartiles
relative_intensity %>%
dplyr::group_by(Forest, Treatment) %>%
dplyr::mutate(percentile = ntile(rel_abund, 100)) %>%
mutate(perc = cut(percentile,
breaks = c(-Inf,25, 50, 75, Inf),
labels = c("lowest 25%", "third 25 %", "second 25 %", "top 25 %")))->
relative_intensity_percentile
# remove unnecessary columns
relative_intensity_percentile %>%
select(-intensity, -total, -percentile)->
relative_intensity_percentile
# merge with the hcoc file
relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x=T)
# relative_intensity_percentile = merge(relative_intensity_percentile,hcoc, by = "Mass", all.x = T)
ggplot(relative_intensity_percentile, aes(x = OC,y = HC, color = perc))+
geom_point(alpha = 0.6)+
scale_color_brewer(palette = "Reds")+
facet_grid(Forest~Treatment)
### OUTPUT
write.csv(relative_intensity_percentile, PERCENTILE, row.names = FALSE)
# this file will be used for the Van Krevelen plots (preFenton and postFenton)
#
# ---------------------------------------------------------------------------- ----
# 2. RELATIVE ABUNDANCE FOR PRE- AND POST-FENTON GROUPS ----
# `rawmaster` is the longform master file.
# summarizing by groups
rawmaster %>%
mutate(intensity = as.numeric(intensity)) %>% # set intensity as a numeric variable
filter(Goethite == "PreGoethite") %>% # keep only pre-Goethite data. we don't want post-adsorption data
group_by(Forest,Fenton,soil,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(intensity), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(soil) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
raw_coregroups
# ^^^ this file has relative abundance of each group for each core
# now we need to summarize this for each treatment. combine all cores
raw_coregroups %>%
group_by(Forest, Fenton, Class) %>%
dplyr::summarise(rel_abund = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
dplyr::mutate(rel_abund = round(rel_abund,2),
se = round(se,2),
relativeabund = paste(rel_abund,"\u00B1",se))->
raw_groups
# now do Tukey HSD
fit_hsd <- function(dat) {
a <-aov(relabund ~ Fenton, data = dat)
h <-HSD.test(a,"Fenton")
#create a tibble with one column for each treatment
#the hsd results are row1 = drought, row2 = saturation, row3 = time zero saturation, row4 = field moist. hsd letters are in column 2
tibble(`PreFenton` = h$groups["PreFenton",2],
`PostFenton` = h$groups["PostFenton",2])
}
raw_coregroups %>%
group_by(Forest, Class) %>%
do(fit_hsd(.)) %>%
# ^ the script above creates a data.frame with columns `Forest`, `Class`, `PreFenton`,`PostFenton`
# in the same command, we are gathering the PreFenton and PostFenton columns into a single column, `Fenton`. hashtag efficiency
gather(Fenton, hsd, 3:4)->
hsd
# now combine `raw_groups` with `hsd`
raw_groups_hsd = merge(raw_groups,hsd, by = c("Forest", "Fenton","Class"))
# now combine the `relativeabund` and `hsd` columns and then remove all unnecessary columns
raw_groups_hsd %>%
mutate(relabund_hsd = paste(relativeabund, hsd)) %>%
select(-se, -relativeabund,-hsd)->
raw_groups_hsd
### OUTPUT
write.csv(raw_groups_hsd,RELATIVE_ABUND, row.names = FALSE)
# write_csv(fticr_relabundance_summary_summarytable,path = "output/table1_relabundance_groups_bytrt.csv")
## Elements ----
master_el = merge(master, elements, by = "Mass")
master_el %>%
filter(Treatment=="PreFenton"| Treatment=="PostFenton") %>%  # choose only the preGoethite samples
gather(element, el_count, C:P) %>%
# replace all 0 by NA and then remove NA to help with calculations
na_if(.,"0") %>% # replace NA with 0
na.omit() %>%
group_by(Forest, Treatment, element) %>%
dplyr::summarise(avg = mean(el_count)) %>%
ungroup %>%
dplyr::mutate(avg = round(avg,0))->
master_el
### OUTPUT
write.csv(master_el, SUMMARY_ELEMENTS, row.names = FALSE)
#
# ---------------------------------------------------------------------------- ----
# 2. PEAK COUNTS ----
## 2.1 INITIAL PEAK COUNTS ----
# we want to determine the total peaks in HW vs. SW
# as well as the number of peaks in each group type
# rawmaster
rawmaster %>%
filter(Treatment=="PreFenton") %>%
filter(intensity>0) %>%
group_by(Mass, Forest,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Forest,Class) %>%
dplyr::summarize(peaks = n()) %>%
# get totals
ungroup %>%
group_by(Forest) %>%
dplyr::mutate(total = sum(peaks))->
counts
## 2.2 FENTON PEAK COUNTS  ----
# to determine peak counts in pre- vs. post-Fenton extracts
rawmaster %>%
filter(Goethite=="PreGoethite") %>%
filter(intensity>0) %>%
group_by(Mass,Fenton,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Fenton,Class) %>%
dplyr::summarize(peaks = n()) %>%
ungroup %>%
group_by(Fenton) %>%
dplyr::mutate(total = sum(peaks))->
fenton_counts
## 2.3 GOETHITE PEAK COUNTS  ----
rawmaster %>%
filter(intensity>0) %>%
group_by(Mass,Goethite,Fenton,Class) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
ungroup %>%
group_by(Fenton,Goethite,Class) %>%
dplyr::summarize(peaks = n()) %>%
ungroup %>%
group_by(Fenton,Goethite) %>%
dplyr::mutate(total = sum(peaks))->
goethite_counts
#
# ---------------------------------------------------------------------------- ----
# FENTON relative abundance lost vs. gained ----
# merge `fenton` file with `relative_intensity_percentile`
fenton_loss = merge(fenton, relative_intensity_percentile, by = c("Mass", "Forest"))
ggplot(fenton_loss[!fenton_loss$loss=="conserved",], aes(x = OC,y = HC, color = loss))+
geom_point(alpha = 0.5)+
scale_color_brewer(palette = "Dark2")+
facet_wrap(~Forest)
### OUTPUT
write.csv(fenton_loss, FENTON_LOSS)
# ---------------------------------------------------------------------------- ----
# GOETHITE adsorbed vs. non-adsorbed  ----
## .1 determining adsorbed vs. not adsorbed molecules ----
## NOT DOING THIS FOR NOW
##    # (binary classification)
##    # Using S/N method of Avneri-Katz 2017
##    # find minimum intensity
##    # divide all by minimum. if >2, SN = 10
##    # but first, convert all zero to NA
##
##    fticr_data_goethite[fticr_data_goethite==0]<-NA
##    minimum = min(c(fticr_data_goethite$PreGoethite, fticr_data_goethite$PostGoethite), na.rm = TRUE)
##
##    # then convert NA back to 0
##    fticr_data_goethite[is.na(fticr_data_goethite)]<-0
##
##    # create a column for adsorbed/not adsorbed
##    setDT(fticr_data_goethite)[PreGoethite/minimum >2 & PostGoethite/minimum < 1, adsorbed := "adsorbed"]
##    fticr_data_goethite[PreGoethite/minimum >2 & PostGoethite/minimum > 1, adsorbed := "not adsorbed"]
##
##    # create a column for new molecules created post-adsorption
##    setDT(fticr_data_goethite)[PreGoethite/minimum == 0 & PostGoethite/minimum > 1, new := "new molecules"]
##
##    ### OUTPUT
##    write_csv(fticr_data_goethite,path = "fticr/fticr_data_goethite.csv")
##
#
## .2 relative strength of sorption ----
# technique from Williams, Borch et al. 2018. Soil Systems
# Calculate relative abundance of each formula in the PreG and PostG samples.
# Subtract PostG-PreG to calculate delta-abundance.
# Use delta-abundance to group the molecules into seven classes:
# < -0.00015 = most sorbed | -0.00010 = more sorbed | -0.00005 = sorbed | 0.00005 = minimal change | 0.00010 = unbound | 0.00015 = more unbound | > 0.00015 = most unbound,
# ALL the calculations are done in one step.
goethite %>%
mutate(fenton = factor(fenton, levels = c("PreFenton","PostFenton"))) %>% # order the levels
dplyr::group_by(Forest,fenton) %>%
# replace all NA with 0
replace(., is.na(.),0) %>%
# new columns for pre-goethite and post-goethite total intensities
dplyr::mutate(preg_total = sum(PreGoethite, na.rm = TRUE),
postg_total = sum(PostGoethite, na.rm = TRUE)) %>%
# new columns for relative abundance as fraction
mutate(preg_rel_abund = PreGoethite/preg_total) %>%
mutate(postg_rel_abund = PostGoethite/postg_total) %>%
# subtract post-pre relative abundance
mutate(delta_abund = postg_rel_abund - preg_rel_abund) %>%
# create a column for binning
mutate(sorption_frac = cut(delta_abund,
breaks = c(-Inf,-0.00015, -0.00010, -0.00005, 0.00005,0.00010,0.00015,Inf),
labels = c("most sorbed", "more sorbed", "sorbed", "minimal change","unbound","more unbound","most unbound"))) ->
# cleaning up: remove unnecessary columnns
#  select(-(preg_total:delta_abund))->
goethite_sorption
goethite_sorption = merge(goethite_sorption,hcoc, by = "Mass", all.x = T)
### OUTPUT
write.csv(goethite_sorption, GOETHITE_ADSORPTION, row.names = FALSE)
ggplot(goethite_sorption, aes(x = OC,y = HC, color = sorption_frac))+
geom_point(alpha = 0.2)+
scale_color_brewer(palette = "PuOr")+
facet_wrap(~fenton)+
theme(legend.position = "top")
#
# ---------------------------------------------------------------------------- ----
# GOETHITE relative abundance of sorbed vs. unsorbed groups ----
# first, subset the goethite_relabund file
goethite_sorption %>%
select(Mass, Forest, fenton, PreGoethite, sorption_frac) %>%
# the adsorbed_frac column has multiple levels. choose only the "most sorbed" and "most unbound"
filter(sorption_frac=="most sorbed"| sorption_frac=="most unbound")->
goethite_subset
# merge with the class meta file
goethite_subset = merge(goethite_subset, class , by = "Mass", all.x = T)
## # remove the "Other" class
## data_goethite_adsorbed %>%
##   filter(!Class=="Other")->
##   data_goethite_adsorbed
# fticr_data_goethite_relabund_adsorbed = fticr_data_goethite_relabund_adsorbed[
#  !fticr_data_goethite_relabund_adsorbed$Class=="Other",]
# now follow steps for relative abundance of groups
#
goethite_subset %>%
group_by(Forest,fenton,sorption_frac,Class) %>%
dplyr::summarize(compounds = sum(as.numeric(PreGoethite), na.rm = TRUE)) %>% # this gives total intensity for each group
# in the same command, we will also create a column for total intensity
ungroup() %>% # remove the previous grouping
group_by(Forest, fenton, sorption_frac) %>% # create a new grouping
dplyr::mutate(total = sum(compounds)) %>%  # add a column for total intensity
# we can also calculate the relative abundance in the same command
mutate(relabund = (compounds/total)*100) %>% # calculate relative abundance as a %
mutate(relabund = round(relabund,2))-> # round to two decimal places
goethite_relabund
## checking that the numbers still hold up when combined by forest type. they do.
# goethite_adsorbed_relabund %>%
#   group_by(fenton, sorption_frac,Class) %>%
#   dplyr::summarize(relab = mean(relabund)) %>%
#   ungroup() %>%
#   group_by(fenton,sorption_frac) %>%
#   dplyr::summarise(rel = sum(relab))
ggplot(goethite_relabund, aes(x = Class, y = relabund, fill = sorption_frac))+
geom_bar(stat = "summary", position = position_dodge())+
facet_wrap(~fenton)
## use this in the graph for relative distribution
### OUTPUT
write.csv(goethite_relabund,GOETHITE_RELABUND, row.names = FALSE)
## BBWM stream recovery
## stream chemistry 1989-2018
# packages -------------------- # ----
library(readxl)
library(readr)
library(tidyverse)
library(dplyr)
library(Rmisc)
library(ggplot2)
library(gameofthrones)
library(data.table)
library(cowplot)
library(qwraps2)
library(reshape2)
#
# files -------------------- # ----
# importing files and cleaning up
bbwm_annual = read_csv ("bbwm_annual.csv") ## fluxes
bbwm_all = read_csv("bbwm_all.csv") ## concentrations
# ANNUAL # creating subset with select columns
annual = bbwm_annual %>%
select(WY,Watershed,Area,H2O,DOC,NO3,SO4,ANC,`Discharge L/s`,EQPH)
annual$Watershed = factor(annual$Watershed,
levels = c("EB","WB"))
annual$Q = (annual$`Discharge L/s`)
# ANNUAL # creating column for time period
setDT(annual)[WY <1990, WY_group := "1989"]
annual[WY>1989 & WY <2000, WY_group := "1990-99"]
annual[WY>1999 & WY <2010, WY_group := "2000-09"]
annual[WY>2009 & WY <2017, WY_group := "2010-16"]
annual[WY>2016, WY_group := "2017-18"]
annual$WY_group=
factor(annual$WY_group,
levels=c("1989","1990-99","2000-09","2010-16","2017-18"))
# ANNUAL # creating column2 for time period
setDT(annual)[WY <1990, period := "pre-treatment"]
annual[WY>1989 & WY <2000, period := "first decade"]
annual[WY>1999 & WY <2010, period := "second decade"]
annual[WY>2009 & WY <2017, period := "third decade"]
annual[WY>2016, period := "recovery"]
annual$period=
factor(annual$period,
levels=c("pre-treatment","first decade","second decade","third decade","recovery"))
# ANNUAL # creating columns for volume weighted values
annual$NO3_vol = round(annual$NO3/(annual$H2O/annual$Area),2)
annual$SO4_vol = round(annual$SO4/(annual$H2O/annual$Area),2)
annual$DOC_vol = round(annual$DOC/(annual$H2O/annual$Area),2)
# ALL # creating subset with select columns
all = bbwm_all %>%
select(Watershed,Year,WY,Month,Day,`NO3 (ueq/L)`,
`SO4 (ueq/L)`,`DOC (mg/L)`,`Discharge (L/sec)`,`Specific Conductance (us/cm)`,`ANC (ueq/L)`) %>%
filter(Watershed %in% c("EB","WB"))
# ALL # renaming columns
all = dplyr::rename(all,NO3 = `NO3 (ueq/L)`)
all = dplyr::rename(all,SO4 = `SO4 (ueq/L)`)
all = dplyr::rename(all,DOC = `DOC (mg/L)`)
all = dplyr::rename(all,Q = `Discharge (L/sec)`)
all = dplyr::rename(all,ANC = `ANC (ueq/L)`)
# create date column
all$dates <- as.Date(with(all, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
# remove NA
annual = annual[complete.cases(annual),]
# exporting ALL and ANNUAL
write.csv(all,"all.csv")
write.csv(annual,"annual.csv")
#
#
# ggplots -------------------- # ----
# ggplots
#nitrate
annual_nit = ggplot (na.omit(annual),
aes(x = WY, y = NO3_vol,color = Watershed,fill=Watershed,shape = Watershed,linetype=Watershed))+
geom_point(data=all,
aes(x = WY, y = NO3, color = "grey"))+
geom_smooth(alpha = 0.2)+
geom_point(size=3,stroke=1.5)+
scale_color_got(discrete=TRUE,option = "tully")+
scale_fill_got(discrete=TRUE,option = "tully")+
scale_shape_manual(values = c(4,19))+
geom_vline(xintercept = 1989.2,linetype="dashed")+
geom_vline(xintercept = 2016.5,linetype="dashed")+
annotate("text", label = "pre-treatment", x = 1988, y = 80, angle = 90,size=4, hjust = "right")+
annotate("text", label = "recovery", x = 2017.5, y = 80, angle = 90,size=4, hjust = "right")+
labs (y = expression (bold ("NO"[3]^-{}* " ("*mu*"eq L"^-1*")")),
x = expression (bold ("WY")))+
theme_bw()+
theme (legend.position = "none")+
theme (legend.key = element_rect(size = 3))+
theme (legend.title = element_blank())+
theme (legend.text=element_text(size=14))+
theme (legend.key = element_rect(size = 5),
legend.key.size = unit(2, 'lines'))+
theme (plot.title = element_text(hjust = 0.05,size = 14))+
theme (axis.text=element_text(size=14,face="bold",color="black"),
axis.title=element_text(size=14,face="bold",color="black")); annual_nit
#sulfate
annual_sulf = ggplot (na.omit(annual),
aes(x = WY, y = SO4_vol,color = Watershed,fill=Watershed,shape = Watershed,linetype=Watershed))+
geom_point(data=all,
aes(x = WY, y = SO4, color = "grey"))+
geom_smooth(alpha = 0.2)+
geom_point(size=3,stroke=1.5)+
scale_color_got(discrete=TRUE,option = "tully")+
scale_fill_got(discrete=TRUE,option = "tully")+
scale_shape_manual(values = c(4,19))+
geom_vline(xintercept = 1989.2,linetype="dashed")+
geom_vline(xintercept = 2016.5,linetype="dashed")+
annotate("text", label = "pre-treatment", x = 1988, y = 200, angle = 90,size=4, hjust = "right")+
annotate("text", label = "recovery", x = 2017.5, y = 200, angle = 90,size=4, hjust = "right")+
labs (y = expression (bold ("SO"[4]^-2* " ("*mu*"eq L"^-1*")")),
x = expression (bold ("WY")))+
theme_bw()+
theme (legend.position = "none")+
theme (legend.key = element_rect(size = 3))+
theme (legend.title = element_blank())+
theme (legend.text=element_text(size=14))+
theme (legend.key = element_rect(size = 5),
legend.key.size = unit(2, 'lines'))+
theme (plot.title = element_text(hjust = 0.05,size = 14))+
theme (axis.text=element_text(size=14,face="bold",color="black"),
axis.title=element_text(size=14,face="bold",color="black")); annual_sulf
#DOC
annual_DOC=ggplot (na.omit(annual), aes(x = WY, y = DOC_vol,color = Watershed,shape = Watershed,linetype=Watershed))+
geom_point(data=all,
aes(x = WY, y = DOC, color = "grey"))+
geom_smooth(color = "grey",alpha = 0.2)+
geom_point(size=3,stroke=1.5)+
scale_color_got(discrete=TRUE,option = "tully")+
scale_shape_manual(values = c(1,19))+
geom_vline(xintercept = 1989.2,linetype="dashed")+
geom_vline(xintercept = 2016.5,linetype="dashed")+
annotate("text", label = "pre-treatment", x = 1988, y = 250, angle = 90,size=4, hjust = "right")+
annotate("text", label = "recovery", x = 2017.5, y = 250, angle = 90,size=4, hjust = "right")+
labs (y = expression (bold ("DOC ("*mu*"mol L"^-1*")")),
x = expression (bold ("WY")))+
theme_bw()+
theme (legend.position = "none")+
theme (legend.key = element_rect(size = 3))+
theme (legend.title = element_blank())+
theme (legend.text=element_text(size=14))+
theme (legend.key = element_rect(size = 5),
legend.key.size = unit(2, 'lines'))+
theme (plot.title = element_text(hjust = 0.05,size = 14))+
theme (axis.text=element_text(size=14,face="bold",color="black"),
axis.title=element_text(size=14,face="bold",color="black"));annual_DOC
#ANC
annual_anc = ggplot (na.omit(annual),
aes(x = WY, y = ANC,color = Watershed,shape = Watershed,linetype=Watershed))+
geom_smooth(color = "grey",alpha = 0.2)+
geom_point(size=3,stroke=1.5)+
scale_color_got(discrete=TRUE,option = "tully")+
scale_shape_manual(values = c(1,19))+
geom_vline(xintercept = 1989.2,linetype="dashed")+
geom_vline(xintercept = 2016.5,linetype="dashed")+
annotate("text", label = "pre-treatment", x = 1988, y = 200, angle = 90,size=4, hjust = "right")+
annotate("text", label = "recovery", x = 2017.5, y = 200, angle = 90,size=4, hjust = "right")+
labs (y = expression (bold ("ANC"),
x = expression (bold ("WY"))))+
theme_bw()+
theme (legend.position = "none")+
theme (legend.key = element_rect(size = 3))+
theme (legend.title = element_blank())+
theme (legend.text=element_text(size=14))+
theme (legend.key = element_rect(size = 5),
legend.key.size = unit(2, 'lines'))+
theme (plot.title = element_text(hjust = 0.05,size = 14))+
theme (axis.text=element_text(size=14,face="bold",color="black"),
axis.title=element_text(size=14,face="bold",color="black")); annual_anc
#pH
annual_pH = ggplot (na.omit(annual), aes(x = WY, y = EQPH,color = Watershed,shape = Watershed,linetype=Watershed))+
geom_smooth(color = "grey",alpha = 0.2)+
geom_point(size=3,stroke=1.5)+
scale_color_got(discrete=TRUE,option = "tully")+
scale_shape_manual(values = c(1,19))+
geom_vline(xintercept = 1989.2,linetype="dashed")+
geom_vline(xintercept = 2016.5,linetype="dashed")+
annotate("text", label = "pre-treatment", x = 1988, y = 7, angle = 90,size=4, hjust = "right")+
annotate("text", label = "recovery", x = 2017.5, y = 7, angle = 90,size=4, hjust = "right")+
labs (y = expression (bold ("Air-equilibrated pH"),
x = expression (bold ("WY"))))+
theme_bw()+
theme (legend.position = c(0.2,0.8))+
theme (legend.key = element_rect(size = 3))+
theme (legend.title = element_blank())+
theme (legend.text=element_text(size=14))+
theme (legend.key = element_rect(size = 5),
legend.key.size = unit(2, 'lines'))+
theme (plot.title = element_text(hjust = 0.05,size = 14))+
theme (axis.text=element_text(size=14,face="bold",color="black"),
axis.title=element_text(size=14,face="bold",color="black")); annual_pH
plot_grid(annual_nit,annual_sulf, annual_DOC, annual_anc,
ncol=2,nrow=2,align="hv")
# annual flux summary table -------------------- # ----
# creating summary table
annual_melt = melt(annual,
id.vars = c("Watershed", "period"),
measure.vars = c("NO3","SO4"))
annual_melt_rmisc = summarySE(annual_melt,
measurevar = "value",
groupvars = c("variable","Watershed","period"), na.rm = TRUE)
annual_melt_rmisc$summary = paste(round(annual_melt_rmisc$value,2),"\u00B1",round(annual_melt_rmisc$se,2))
annual_summary = dcast(annual_melt_rmisc,
variable+Watershed~period,
value.var = "summary")
write.csv(annual_summary, file="annual_flux_summary.csv")
#
# summary stats -------------------- # ----
# summary stats
#
# files -------------------- # ----
# importing files and cleaning up
bbwm_annual = read_csv ("bbwm_annual.csv") ## fluxes
